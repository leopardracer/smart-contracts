/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export interface GameContractFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployGameContract"
      | "getContractListDeploy"
      | "owner"
      | "renounceOwnership"
      | "signerCheck"
      | "signerListAdd"
      | "signerListCheck"
      | "signerListRemove"
      | "signerTotal"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameContractDeploy"
      | "OwnershipTransferred"
      | "SignerListAdd"
      | "SignerListRemove"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployGameContract",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractListDeploy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerCheck",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signerListAdd",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "signerListCheck",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "signerListRemove",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "signerTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployGameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractListDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerListAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerListCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerListRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace GameContractDeployEvent {
  export type InputTuple = [owner: AddressLike, contractAddress: AddressLike];
  export type OutputTuple = [owner: string, contractAddress: string];
  export interface OutputObject {
    owner: string;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerListAddEvent {
  export type InputTuple = [
    totalAddedUser: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [totalAddedUser: bigint, timestamp: bigint];
  export interface OutputObject {
    totalAddedUser: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerListRemoveEvent {
  export type InputTuple = [
    totalAddedUser: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [totalAddedUser: bigint, timestamp: bigint];
  export interface OutputObject {
    totalAddedUser: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameContractFactory extends BaseContract {
  connect(runner?: ContractRunner | null): GameContractFactory;
  waitForDeployment(): Promise<this>;

  interface: GameContractFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployGameContract: TypedContractMethod<
    [gameContractOwner: AddressLike, salt: BytesLike],
    [void],
    "nonpayable"
  >;

  getContractListDeploy: TypedContractMethod<[], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  signerCheck: TypedContractMethod<
    [signerToCheck: AddressLike],
    [boolean],
    "view"
  >;

  signerListAdd: TypedContractMethod<
    [signerListToAdd: AddressLike[]],
    [void],
    "nonpayable"
  >;

  signerListCheck: TypedContractMethod<
    [signerListToCheck: AddressLike[]],
    [boolean[]],
    "view"
  >;

  signerListRemove: TypedContractMethod<
    [listSignerToRemove: AddressLike[]],
    [void],
    "nonpayable"
  >;

  signerTotal: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployGameContract"
  ): TypedContractMethod<
    [gameContractOwner: AddressLike, salt: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getContractListDeploy"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signerCheck"
  ): TypedContractMethod<[signerToCheck: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "signerListAdd"
  ): TypedContractMethod<
    [signerListToAdd: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signerListCheck"
  ): TypedContractMethod<
    [signerListToCheck: AddressLike[]],
    [boolean[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "signerListRemove"
  ): TypedContractMethod<
    [listSignerToRemove: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signerTotal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "GameContractDeploy"
  ): TypedContractEvent<
    GameContractDeployEvent.InputTuple,
    GameContractDeployEvent.OutputTuple,
    GameContractDeployEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SignerListAdd"
  ): TypedContractEvent<
    SignerListAddEvent.InputTuple,
    SignerListAddEvent.OutputTuple,
    SignerListAddEvent.OutputObject
  >;
  getEvent(
    key: "SignerListRemove"
  ): TypedContractEvent<
    SignerListRemoveEvent.InputTuple,
    SignerListRemoveEvent.OutputTuple,
    SignerListRemoveEvent.OutputObject
  >;

  filters: {
    "GameContractDeploy(address,address)": TypedContractEvent<
      GameContractDeployEvent.InputTuple,
      GameContractDeployEvent.OutputTuple,
      GameContractDeployEvent.OutputObject
    >;
    GameContractDeploy: TypedContractEvent<
      GameContractDeployEvent.InputTuple,
      GameContractDeployEvent.OutputTuple,
      GameContractDeployEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SignerListAdd(uint256,uint256)": TypedContractEvent<
      SignerListAddEvent.InputTuple,
      SignerListAddEvent.OutputTuple,
      SignerListAddEvent.OutputObject
    >;
    SignerListAdd: TypedContractEvent<
      SignerListAddEvent.InputTuple,
      SignerListAddEvent.OutputTuple,
      SignerListAddEvent.OutputObject
    >;

    "SignerListRemove(uint256,uint256)": TypedContractEvent<
      SignerListRemoveEvent.InputTuple,
      SignerListRemoveEvent.OutputTuple,
      SignerListRemoveEvent.OutputObject
    >;
    SignerListRemove: TypedContractEvent<
      SignerListRemoveEvent.InputTuple,
      SignerListRemoveEvent.OutputTuple,
      SignerListRemoveEvent.OutputObject
    >;
  };
}
