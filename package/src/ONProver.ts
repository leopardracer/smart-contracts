/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export declare namespace ONProver {
  export type ConfigurationStruct = {
    maxDailyLimit: BigNumberish;
    timeStart: BigNumberish;
    timeEnd: BigNumberish;
    tokenContract: AddressLike;
  };

  export type ConfigurationStructOutput = [
    maxDailyLimit: bigint,
    timeStart: bigint,
    timeEnd: bigint,
    tokenContract: string
  ] & {
    maxDailyLimit: bigint;
    timeStart: bigint;
    timeEnd: bigint;
    tokenContract: string;
  };

  export type DailyClaimStruct = {
    claimed: BigNumberish;
    userCount: BigNumberish;
  };

  export type DailyClaimStructOutput = [claimed: bigint, userCount: bigint] & {
    claimed: bigint;
    userCount: bigint;
  };
}

export interface ONProverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addOperator"
      | "claim"
      | "getConfig"
      | "getCurrentDay"
      | "getMetricByDate"
      | "getMetricToday"
      | "getTotalClaim"
      | "getUserNonce"
      | "isOperator"
      | "owner"
      | "removeOperator"
      | "renounceOwnership"
      | "setConfiguration"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddOperator"
      | "OwnershipTransferred"
      | "RemoveOperator"
      | "TokenClaim"
      | "TokenClaimDaily"
      | "UpdateConfigMaxDailyLimit"
      | "UpdateConfigTimeEnd"
      | "UpdateConfigTimeStart"
      | "UpdateConfigTokenContract"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetricByDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetricToday",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalClaim",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfiguration",
    values: [ONProver.ConfigurationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetricByDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetricToday",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AddOperatorEvent {
  export type InputTuple = [newOperator: AddressLike];
  export type OutputTuple = [newOperator: string];
  export interface OutputObject {
    newOperator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveOperatorEvent {
  export type InputTuple = [OldOperator: AddressLike];
  export type OutputTuple = [OldOperator: string];
  export interface OutputObject {
    OldOperator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenClaimEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenClaimDailyEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    day: BigNumberish
  ];
  export type OutputTuple = [to: string, amount: bigint, day: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
    day: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateConfigMaxDailyLimitEvent {
  export type InputTuple = [maxDailyLimit: BigNumberish];
  export type OutputTuple = [maxDailyLimit: bigint];
  export interface OutputObject {
    maxDailyLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateConfigTimeEndEvent {
  export type InputTuple = [timeEnd: BigNumberish];
  export type OutputTuple = [timeEnd: bigint];
  export interface OutputObject {
    timeEnd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateConfigTimeStartEvent {
  export type InputTuple = [timeStart: BigNumberish];
  export type OutputTuple = [timeStart: bigint];
  export interface OutputObject {
    timeStart: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateConfigTokenContractEvent {
  export type InputTuple = [tokenContract: AddressLike];
  export type OutputTuple = [tokenContract: string];
  export interface OutputObject {
    tokenContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ONProver extends BaseContract {
  connect(runner?: ContractRunner | null): ONProver;
  waitForDeployment(): Promise<this>;

  interface: ONProverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addOperator: TypedContractMethod<
    [operatorNew: AddressLike],
    [boolean],
    "nonpayable"
  >;

  claim: TypedContractMethod<[proof: BytesLike], [void], "nonpayable">;

  getConfig: TypedContractMethod<
    [],
    [ONProver.ConfigurationStructOutput],
    "view"
  >;

  getCurrentDay: TypedContractMethod<[], [bigint], "view">;

  getMetricByDate: TypedContractMethod<
    [day: BigNumberish],
    [ONProver.DailyClaimStructOutput],
    "view"
  >;

  getMetricToday: TypedContractMethod<
    [],
    [ONProver.DailyClaimStructOutput],
    "view"
  >;

  getTotalClaim: TypedContractMethod<
    [userAddress: AddressLike],
    [bigint],
    "view"
  >;

  getUserNonce: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  isOperator: TypedContractMethod<
    [checkAddress: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeOperator: TypedContractMethod<
    [operatorOld: AddressLike],
    [boolean],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setConfiguration: TypedContractMethod<
    [cfg: ONProver.ConfigurationStruct],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addOperator"
  ): TypedContractMethod<[operatorNew: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[proof: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<[], [ONProver.ConfigurationStructOutput], "view">;
  getFunction(
    nameOrSignature: "getCurrentDay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMetricByDate"
  ): TypedContractMethod<
    [day: BigNumberish],
    [ONProver.DailyClaimStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMetricToday"
  ): TypedContractMethod<[], [ONProver.DailyClaimStructOutput], "view">;
  getFunction(
    nameOrSignature: "getTotalClaim"
  ): TypedContractMethod<[userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserNonce"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isOperator"
  ): TypedContractMethod<[checkAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeOperator"
  ): TypedContractMethod<[operatorOld: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConfiguration"
  ): TypedContractMethod<
    [cfg: ONProver.ConfigurationStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AddOperator"
  ): TypedContractEvent<
    AddOperatorEvent.InputTuple,
    AddOperatorEvent.OutputTuple,
    AddOperatorEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemoveOperator"
  ): TypedContractEvent<
    RemoveOperatorEvent.InputTuple,
    RemoveOperatorEvent.OutputTuple,
    RemoveOperatorEvent.OutputObject
  >;
  getEvent(
    key: "TokenClaim"
  ): TypedContractEvent<
    TokenClaimEvent.InputTuple,
    TokenClaimEvent.OutputTuple,
    TokenClaimEvent.OutputObject
  >;
  getEvent(
    key: "TokenClaimDaily"
  ): TypedContractEvent<
    TokenClaimDailyEvent.InputTuple,
    TokenClaimDailyEvent.OutputTuple,
    TokenClaimDailyEvent.OutputObject
  >;
  getEvent(
    key: "UpdateConfigMaxDailyLimit"
  ): TypedContractEvent<
    UpdateConfigMaxDailyLimitEvent.InputTuple,
    UpdateConfigMaxDailyLimitEvent.OutputTuple,
    UpdateConfigMaxDailyLimitEvent.OutputObject
  >;
  getEvent(
    key: "UpdateConfigTimeEnd"
  ): TypedContractEvent<
    UpdateConfigTimeEndEvent.InputTuple,
    UpdateConfigTimeEndEvent.OutputTuple,
    UpdateConfigTimeEndEvent.OutputObject
  >;
  getEvent(
    key: "UpdateConfigTimeStart"
  ): TypedContractEvent<
    UpdateConfigTimeStartEvent.InputTuple,
    UpdateConfigTimeStartEvent.OutputTuple,
    UpdateConfigTimeStartEvent.OutputObject
  >;
  getEvent(
    key: "UpdateConfigTokenContract"
  ): TypedContractEvent<
    UpdateConfigTokenContractEvent.InputTuple,
    UpdateConfigTokenContractEvent.OutputTuple,
    UpdateConfigTokenContractEvent.OutputObject
  >;

  filters: {
    "AddOperator(address)": TypedContractEvent<
      AddOperatorEvent.InputTuple,
      AddOperatorEvent.OutputTuple,
      AddOperatorEvent.OutputObject
    >;
    AddOperator: TypedContractEvent<
      AddOperatorEvent.InputTuple,
      AddOperatorEvent.OutputTuple,
      AddOperatorEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RemoveOperator(address)": TypedContractEvent<
      RemoveOperatorEvent.InputTuple,
      RemoveOperatorEvent.OutputTuple,
      RemoveOperatorEvent.OutputObject
    >;
    RemoveOperator: TypedContractEvent<
      RemoveOperatorEvent.InputTuple,
      RemoveOperatorEvent.OutputTuple,
      RemoveOperatorEvent.OutputObject
    >;

    "TokenClaim(address,uint256)": TypedContractEvent<
      TokenClaimEvent.InputTuple,
      TokenClaimEvent.OutputTuple,
      TokenClaimEvent.OutputObject
    >;
    TokenClaim: TypedContractEvent<
      TokenClaimEvent.InputTuple,
      TokenClaimEvent.OutputTuple,
      TokenClaimEvent.OutputObject
    >;

    "TokenClaimDaily(address,uint256,uint256)": TypedContractEvent<
      TokenClaimDailyEvent.InputTuple,
      TokenClaimDailyEvent.OutputTuple,
      TokenClaimDailyEvent.OutputObject
    >;
    TokenClaimDaily: TypedContractEvent<
      TokenClaimDailyEvent.InputTuple,
      TokenClaimDailyEvent.OutputTuple,
      TokenClaimDailyEvent.OutputObject
    >;

    "UpdateConfigMaxDailyLimit(uint128)": TypedContractEvent<
      UpdateConfigMaxDailyLimitEvent.InputTuple,
      UpdateConfigMaxDailyLimitEvent.OutputTuple,
      UpdateConfigMaxDailyLimitEvent.OutputObject
    >;
    UpdateConfigMaxDailyLimit: TypedContractEvent<
      UpdateConfigMaxDailyLimitEvent.InputTuple,
      UpdateConfigMaxDailyLimitEvent.OutputTuple,
      UpdateConfigMaxDailyLimitEvent.OutputObject
    >;

    "UpdateConfigTimeEnd(uint64)": TypedContractEvent<
      UpdateConfigTimeEndEvent.InputTuple,
      UpdateConfigTimeEndEvent.OutputTuple,
      UpdateConfigTimeEndEvent.OutputObject
    >;
    UpdateConfigTimeEnd: TypedContractEvent<
      UpdateConfigTimeEndEvent.InputTuple,
      UpdateConfigTimeEndEvent.OutputTuple,
      UpdateConfigTimeEndEvent.OutputObject
    >;

    "UpdateConfigTimeStart(uint64)": TypedContractEvent<
      UpdateConfigTimeStartEvent.InputTuple,
      UpdateConfigTimeStartEvent.OutputTuple,
      UpdateConfigTimeStartEvent.OutputObject
    >;
    UpdateConfigTimeStart: TypedContractEvent<
      UpdateConfigTimeStartEvent.InputTuple,
      UpdateConfigTimeStartEvent.OutputTuple,
      UpdateConfigTimeStartEvent.OutputObject
    >;

    "UpdateConfigTokenContract(address)": TypedContractEvent<
      UpdateConfigTokenContractEvent.InputTuple,
      UpdateConfigTokenContractEvent.OutputTuple,
      UpdateConfigTokenContractEvent.OutputObject
    >;
    UpdateConfigTokenContract: TypedContractEvent<
      UpdateConfigTokenContractEvent.InputTuple,
      UpdateConfigTokenContractEvent.OutputTuple,
      UpdateConfigTokenContractEvent.OutputObject
    >;
  };
}
